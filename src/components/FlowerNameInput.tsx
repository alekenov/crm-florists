import { useState, useRef, useEffect, useMemo } from "react";
import { Input } from "./ui/input";
import { Check } from "lucide-react";
import { Inventory } from "../api/types";

// Fallback —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const fallbackFlowers = [
  "–†–æ–∑—ã",
  "–¢—é–ª—å–ø–∞–Ω—ã",
  "–ü–∏–æ–Ω—ã",
  "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã",
  "–õ–∏–ª–∏–∏",
  "–ò—Ä–∏—Å—ã",
  "–ì–≤–æ–∑–¥–∏–∫–∏",
  "–§—Ä–µ–∑–∏–∏",
  "–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–∏",
  "–ì–µ—Ä–±–µ—Ä—ã",
  "–û—Ä—Ö–∏–¥–µ–∏",
  "–≠—É—Å—Ç–æ–º—ã",
  "–ö–∞–ª–ª—ã",
  "–õ–µ–≤–∫–æ–∏",
  "–ó–µ–ª–µ–Ω—å",
  "–≠–≤–∫–∞–ª–∏–ø—Ç",
  "–ì–∏–ø—Å–æ—Ñ–∏–ª–∞",
  "–°—Ç–∞—Ç–∏—Ü–∞",
  "–†–∞–Ω—É–Ω–∫—É–ª—é—Å—ã",
  "–ê—Å—Ç—Ä—ã"
];

interface FlowerOption {
  name: string;
  quantity?: number;
  price?: number;
  fromInventory?: boolean;
}

interface FlowerNameInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
  existingFlowers?: string[]; // —Ü–≤–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  inventory?: Inventory[]; // –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–ª–∞–¥–∞
  loading?: boolean;
}

export function FlowerNameInput({
  value,
  onChange,
  placeholder = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞",
  className = "",
  existingFlowers = [],
  inventory = [],
  loading = false
}: FlowerNameInputProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [filteredOptions, setFilteredOptions] = useState<FlowerOption[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const allOptions = useMemo(() => {
    const options: FlowerOption[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Ü–µ–Ω–æ–π
    if (inventory && inventory.length > 0) {
      inventory.forEach(item => {
        options.push({
          name: item.name,
          quantity: item.quantity,
          price: item.price,
          fromInventory: true
        });
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–≤–µ—Ç—ã –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ)
    existingFlowers.forEach(flower => {
      if (!options.some(opt => opt.name.toLowerCase() === flower.toLowerCase())) {
        options.push({ name: flower, fromInventory: false });
      }
    });

    // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–ø–∏—Å–æ–∫
    if (inventory.length === 0 && !loading) {
      fallbackFlowers.forEach(flower => {
        if (!options.some(opt => opt.name.toLowerCase() === flower.toLowerCase())) {
          options.push({ name: flower, fromInventory: false });
        }
      });
    }

    return options;
  }, [existingFlowers, inventory, loading]);

  useEffect(() => {
    if (value.trim()) {
      const filtered = allOptions.filter(option =>
        option.name.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredOptions(filtered);
    } else {
      setFilteredOptions(allOptions);
    }
  }, [value, allOptions]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    onChange(newValue);
    setIsOpen(true);
  };

  const handleSelectOption = (optionName: string) => {
    onChange(optionName);
    setIsOpen(false);
    inputRef.current?.blur();
  };

  const handleInputFocus = () => {
    setIsOpen(true);
  };

  const handleInputBlur = (e: React.FocusEvent) => {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∫–ª–∏–∫ –ø–æ –æ–ø—Ü–∏–∏
    setTimeout(() => {
      if (!dropdownRef.current?.contains(e.relatedTarget as Node)) {
        setIsOpen(false);
      }
    }, 150);
  };

  return (
    <div className="relative">
      <Input
        ref={inputRef}
        value={value}
        onChange={handleInputChange}
        onFocus={handleInputFocus}
        onBlur={handleInputBlur}
        placeholder={placeholder}
        className={className}
      />

      {isOpen && (
        <div
          ref={dropdownRef}
          className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto"
        >
          {loading && (
            <div className="px-4 py-3 text-center text-gray-500">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary mx-auto"></div>
              <span className="text-xs mt-2 block">–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–≤–µ—Ç–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞...</span>
            </div>
          )}

          {!loading && !value.trim() && (
            <div className="px-4 py-2 bg-gray-50 border-b border-gray-100">
              <span className="text-xs text-gray-500 font-medium">
                {inventory.length > 0 ? 'üì¶ –¶–≤–µ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞' : 'üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã'}
              </span>
            </div>
          )}

          {!loading && filteredOptions.slice(0, 10).map((option, index) => {
            const isExisting = existingFlowers.includes(option.name);

            return (
              <button
                key={index}
                type="button"
                onClick={() => handleSelectOption(option.name)}
                className="w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors flex items-center justify-between group touch-manipulation"
              >
                <div className="flex-1">
                  <span className="text-gray-900">{option.name}</span>
                  {option.fromInventory && (
                    <div className="flex items-center gap-3 mt-1">
                      {option.quantity !== undefined && (
                        <span className="text-xs text-gray-500">
                          –ù–∞ —Å–∫–ª–∞–¥–µ: {option.quantity} —à—Ç
                        </span>
                      )}
                      {option.price !== undefined && (
                        <span className="text-xs text-gray-500">
                          –¶–µ–Ω–∞: {option.price} ‚Ç∏
                        </span>
                      )}
                    </div>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  {value.toLowerCase() === option.name.toLowerCase() && (
                    <Check className="w-4 h-4 text-purple-600" />
                  )}
                  {isExisting && value.toLowerCase() !== option.name.toLowerCase() && (
                    <span className="text-xs text-purple-600 bg-purple-50 px-2 py-1 rounded-full">
                      –£–∂–µ –≤ —Å–æ—Å—Ç–∞–≤–µ
                    </span>
                  )}
                </div>
              </button>
            );
          })}

          {/* –û–ø—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è */}
          {!loading && value.trim() && !allOptions.some(opt => opt.name.toLowerCase() === value.toLowerCase()) && (
            <button
              type="button"
              onClick={() => handleSelectOption(value)}
              className="w-full px-4 py-3 text-left bg-purple-50 hover:bg-purple-100 transition-colors border-t border-purple-100 touch-manipulation"
            >
              <span className="text-purple-700 font-medium">+ –î–æ–±–∞–≤–∏—Ç—å "{value}"</span>
              <span className="text-xs text-purple-600 block mt-1">–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞</span>
            </button>
          )}

          {!loading && filteredOptions.length === 0 && value.trim() && (
            <div className="px-4 py-3 text-gray-500 text-center">
              <p className="text-sm">–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</p>
              <button
                type="button"
                onClick={() => handleSelectOption(value)}
                className="text-purple-600 hover:text-purple-700 font-medium mt-2 text-sm"
              >
                + –î–æ–±–∞–≤–∏—Ç—å "{value}" –∫–∞–∫ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–æ–∫
              </button>
            </div>
          )}

          {!loading && filteredOptions.length === 0 && !value.trim() && (
            <div className="px-4 py-8 text-center text-gray-400">
              <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞</p>
              <p className="text-xs mt-1">
                {inventory.length > 0 ? '–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ' : '–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'}
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}