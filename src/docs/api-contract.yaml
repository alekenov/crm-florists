openapi: 3.0.3
info:
  title: üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω API
  description: |
    REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ—á–Ω—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º
    
    ## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–≤–∏—Ç—Ä–∏–Ω–∞/–∫–∞—Ç–∞–ª–æ–≥)
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ 
    - –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (privacy-first)
    - –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    ## Privacy-First –ø–æ–¥—Ö–æ–¥
    - –°–±–æ—Ä —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –ù–∏–∫–∞–∫–∏—Ö email –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–≤
    
  version: 1.0.0
  contact:
    name: –¶–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω API
  license:
    name: MIT

servers:
  - url: https://api.flower-shop.com/v1
    description: Production server
  - url: https://dev-api.flower-shop.com/v1  
    description: Development server
  - url: http://localhost:3000/api/v1
    description: Local development

tags:
  - name: products
    description: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
  - name: orders
    description: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
  - name: inventory
    description: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
  - name: customers
    description: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
  - name: profile
    description: –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

paths:
  # PRODUCTS API
  /products:
    get:
      tags: [products]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [vitrina, catalog, all]
            default: all
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, all]
            default: all
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    
    post:
      tags: [products]
      summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'

  /products/{id}:
    get:
      tags: [products]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [products]
      summary: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    
    delete:
      tags: [products]
      summary: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω

  /products/{id}/toggle-status:
    patch:
      tags: [products]
      summary: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  # ORDERS API  
  /orders:
    get:
      tags: [orders]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
        - name: customer_phone
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    
    post:
      tags: [orders]
      summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      tags: [orders]
      summary: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    
    put:
      tags: [orders]
      summary: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}/status:
    patch:
      tags: [orders]
      summary: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/OrderStatus'
              required: [status]
      responses:
        '200':
          description: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  # INVENTORY API
  /inventory:
    get:
      tags: [inventory]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: low_stock
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
    
    post:
      tags: [inventory]
      summary: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInventoryItemRequest'
      responses:
        '201':
          description: –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'

  /inventory/{id}:
    get:
      tags: [inventory]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –ø–æ ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
    
    put:
      tags: [inventory]
      summary: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryItemRequest'
      responses:
        '200':
          description: –¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'

  /inventory/audit:
    post:
      tags: [inventory]
      summary: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAuditRequest'
      responses:
        '201':
          description: –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryAudit'

  /inventory/supply:
    post:
      tags: [inventory]
      summary: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessSupplyRequest'
      responses:
        '201':
          description: –ü–æ—Å—Ç–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
          content:
            application/json:
              schema:
                type: object
                properties:
                  supply_id:
                    type: string
                  items_updated:
                    type: integer
                  total_cost:
                    type: number

  # CUSTOMERS API
  /customers:
    get:
      tags: [customers]
      summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, vip, inactive, all]
            default: all
        - name: search
          in: query
          description: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    
    post:
      tags: [customers]
      summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{id}:
    get:
      tags: [customers]
      summary: –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetail'
    
    put:
      tags: [customers]
      summary: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{id}/orders:
    get:
      tags: [customers]
      summary: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  # PROFILE API
  /profile:
    get:
      tags: [profile]
      summary: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      responses:
        '200':
          description: –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
    
    put:
      tags: [profile]
      summary: –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminProfileRequest'
      responses:
        '200':
          description: –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'

  /profile/dashboard:
    get:
      tags: [profile]
      summary: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
      responses:
        '200':
          description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

components:
  schemas:
    # Product schemas
    Product:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: string
          example: "5000 ‚Ç∏"
        image:
          type: string
          format: uri
        images:
          type: array
          items:
            type: string
            format: uri
        type:
          type: string
          enum: [vitrina, catalog]
        isAvailable:
          type: boolean
        createdAt:
          type: string
          format: date-time
        # –í–∏—Ç—Ä–∏–Ω–∞ –ø–æ–ª—è
        width:
          type: string
          description: "–¢–æ–ª—å–∫–æ –¥–ª—è type: vitrina"
        height:
          type: string
          description: "–¢–æ–ª—å–∫–æ –¥–ª—è type: vitrina"
        # –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–ª—è
        video:
          type: string
          format: uri
          description: "–¢–æ–ª—å–∫–æ –¥–ª—è type: catalog"
        duration:
          type: string
          description: "–í—Ä–µ–º—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"
        discount:
          type: string
          description: "–°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
        composition:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: string
        colors:
          type: array
          items:
            type: string
            enum: [pink, blue, red, yellow, green, purple, white, mix]
        catalogWidth:
          type: string
          description: "–¢–æ–ª—å–∫–æ –¥–ª—è type: catalog"
        catalogHeight:
          type: string
          description: "–¢–æ–ª—å–∫–æ –¥–ª—è type: catalog"
        productionTime:
          type: string
          enum: [short, medium, long]
          description: "–î–æ 7 –¥–Ω–µ–π | –û—Ç 5 –¥–æ 10 | –û—Ç 10 –¥–Ω–µ–π –∏ –±–æ–ª–µ–µ"

    CreateProductRequest:
      type: object
      required: [title, price, type]
      properties:
        title:
          type: string
        price:
          type: string
        image:
          type: string
          format: uri
        images:
          type: array
          items:
            type: string
            format: uri
        type:
          type: string
          enum: [vitrina, catalog]
        width:
          type: string
        height:
          type: string
        video:
          type: string
          format: uri
        duration:
          type: string
        discount:
          type: string
        composition:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: string
        colors:
          type: array
          items:
            type: string
        catalogWidth:
          type: string
        catalogHeight:
          type: string
        productionTime:
          type: string

    UpdateProductRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProductRequest'
        - type: object
          properties:
            isAvailable:
              type: boolean

    # Order schemas
    OrderStatus:
      type: string
      enum: [new, paid, accepted, assembled, in-transit, completed]
      description: |
        - new: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        - paid: –û–ø–ª–∞—á–µ–Ω
        - accepted: –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É
        - assembled: –°–æ–±—Ä–∞–Ω
        - in-transit: –í –¥–æ—Å—Ç–∞–≤–∫–µ
        - completed: –ó–∞–≤–µ—Ä—à–µ–Ω

    Order:
      type: object
      properties:
        id:
          type: string
        customerName:
          type: string
          nullable: true
        customerPhone:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
              quantity:
                type: integer
              price:
                type: string
              notes:
                type: string
        totalAmount:
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        deliveryAddress:
          type: string
          nullable: true
        deliveryDate:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateOrderRequest:
      type: object
      required: [customerPhone, items]
      properties:
        customerName:
          type: string
        customerPhone:
          type: string
        items:
          type: array
          items:
            type: object
            required: [productId, quantity]
            properties:
              productId:
                type: integer
              quantity:
                type: integer
              notes:
                type: string
        deliveryAddress:
          type: string
        deliveryDate:
          type: string
          format: date-time
        notes:
          type: string

    UpdateOrderRequest:
      allOf:
        - $ref: '#/components/schemas/CreateOrderRequest'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/OrderStatus'

    # Inventory schemas
    InventoryItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          type: string
        unit:
          type: string
          enum: [—à—Ç, –∫–≥, –ø–∞—á–∫–∞, –±—É–∫–µ—Ç]
        currentStock:
          type: number
        minThreshold:
          type: number
        price:
          type: number
        supplier:
          type: string
        lastRestocked:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date
          nullable: true

    CreateInventoryItemRequest:
      type: object
      required: [name, category, unit, currentStock, price]
      properties:
        name:
          type: string
        category:
          type: string
        unit:
          type: string
        currentStock:
          type: number
        minThreshold:
          type: number
        price:
          type: number
        supplier:
          type: string
        expirationDate:
          type: string
          format: date

    UpdateInventoryItemRequest:
      allOf:
        - $ref: '#/components/schemas/CreateInventoryItemRequest'
        - type: object
          properties:
            lastRestocked:
              type: string
              format: date-time

    InventoryAudit:
      type: object
      properties:
        id:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [in-progress, completed]
        items:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: integer
              expectedStock:
                type: number
              actualStock:
                type: number
              discrepancy:
                type: number
        results:
          type: object
          properties:
            totalItems:
              type: integer
            discrepancies:
              type: integer
            adjustments:
              type: integer

    StartAuditRequest:
      type: object
      properties:
        itemIds:
          type: array
          items:
            type: integer
          description: "–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"

    ProcessSupplyRequest:
      type: object
      required: [items, supplier]
      properties:
        supplier:
          type: string
        items:
          type: array
          items:
            type: object
            required: [itemId, quantity, unitPrice]
            properties:
              itemId:
                type: integer
              quantity:
                type: number
              unitPrice:
                type: number

    # Customer schemas
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          nullable: true
          description: "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ"
        phone:
          type: string
          description: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
        memberSince:
          type: string
          format: date-time
        totalOrders:
          type: integer
        totalSpent:
          type: number
        status:
          type: string
          enum: [active, vip, inactive]
        notes:
          type: string
          nullable: true

    CustomerDetail:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            recentOrders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            statistics:
              type: object
              properties:
                averageOrderValue:
                  type: number
                orderFrequency:
                  type: number
                lastOrderDate:
                  type: string
                  format: date-time

    CreateCustomerRequest:
      type: object
      required: [phone]
      properties:
        name:
          type: string
        phone:
          type: string
        notes:
          type: string

    UpdateCustomerRequest:
      allOf:
        - $ref: '#/components/schemas/CreateCustomerRequest'
        - type: object
          properties:
            status:
              type: string
              enum: [active, vip, inactive]

    # Profile schemas
    AdminProfile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        shopName:
          type: string
        phone:
          type: string
        address:
          type: string
        workingHours:
          type: string
        avatar:
          type: string
          format: uri
          nullable: true

    UpdateAdminProfileRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        shopName:
          type: string
        phone:
          type: string
        address:
          type: string
        workingHours:
          type: string
        avatar:
          type: string
          format: uri

    DashboardStats:
      type: object
      properties:
        totalRevenue:
          type: number
        totalOrders:
          type: integer
        activeProducts:
          type: integer
        lowStockItems:
          type: integer
        newCustomers:
          type: integer
        recentActivity:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [order, product, customer, inventory]
              description:
                type: string
              timestamp:
                type: string
                format: date-time

    # Common schemas
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          nullable: true

  responses:
    BadRequest:
      description: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []