import { useState, useEffect, useCallback } from 'react';

// üå∏ URL-based routing –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å browser URL

export type RouteParams = {
  [key: string]: string | undefined;
};

export interface Route {
  path: string;
  tab: 'orders' | 'products' | 'inventory' | 'customers' | 'profile';
  screen: string;
  params?: RouteParams;
}

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const getBasePath = (): string => {
  // –í —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Figma Make –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
  const pathname = window.location.pathname;
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (pathname.includes('.html') || pathname.includes('preview')) {
    return '';
  }
  
  return '';
};

// –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const ROUTES = {
  // Main tab routes
  '/': { tab: 'orders', screen: 'main' },
  '/orders': { tab: 'orders', screen: 'main' },
  '/products': { tab: 'products', screen: 'main' },
  '/inventory': { tab: 'inventory', screen: 'main' },
  '/customers': { tab: 'customers', screen: 'main' },
  '/profile': { tab: 'profile', screen: 'main' },
  
  // Product routes
  '/products/add': { tab: 'products', screen: 'selector' },
  '/products/add/vitrina': { tab: 'products', screen: 'vitrina-form' },
  '/products/add/catalog': { tab: 'products', screen: 'catalog-form' },
  '/products/:id': { tab: 'products', screen: 'product-detail' },
  '/products/:id/edit': { tab: 'products', screen: 'product-edit' },
  
  // Order routes
  '/orders/add': { tab: 'orders', screen: 'add-order' },
  '/orders/:id': { tab: 'orders', screen: 'order-detail' },
  
  // Inventory routes
  '/inventory/add': { tab: 'inventory', screen: 'add-inventory-item' },
  '/inventory/:id': { tab: 'inventory', screen: 'inventory-item-detail' },
  '/inventory/audit': { tab: 'inventory', screen: 'inventory-audit' },
  
  // Customer routes
  '/customers/add': { tab: 'customers', screen: 'add-customer' },
  '/customers/:id': { tab: 'customers', screen: 'customer-detail' },
  
  // Profile routes
  '/dashboard': { tab: 'profile', screen: 'dashboard' },
} as const;

// –ü–∞—Ä—Å–∏–Ω–≥ URL –≤ Route –æ–±—ä–µ–∫—Ç (moved outside component)
const parseUrl = (pathname: string): Route => {
  // –£–¥–∞–ª—è–µ–º trailing slash
  const cleanPath = pathname.replace(/\/$/, '') || '/';
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Figma Make
  if (cleanPath.includes('preview_page.html') || 
      cleanPath.includes('.html') || 
      cleanPath.startsWith('/figma/') ||
      cleanPath === '/index.html') {
    // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    return {
      path: '/orders',
      tab: 'orders',
      screen: 'main',
    };
  }
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (ROUTES[cleanPath as keyof typeof ROUTES]) {
    return {
      path: cleanPath,
      ...ROUTES[cleanPath as keyof typeof ROUTES],
    };
  }
  
  // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [routePath, routeConfig] of Object.entries(ROUTES)) {
    const params = matchRoute(routePath, cleanPath);
    if (params) {
      return {
        path: cleanPath,
        ...routeConfig,
        params,
      };
    }
  }
  
  // Fallback –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö app –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (cleanPath.startsWith('/')) {
    console.warn(`App route not found: ${pathname}, redirecting to /orders`);
  }
  
  return {
    path: '/orders',
    tab: 'orders',
    screen: 'main',
  };
};

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (moved outside component)
const matchRoute = (routePath: string, actualPath: string): RouteParams | null => {
  const routeParts = routePath.split('/');
  const actualParts = actualPath.split('/');
  
  if (routeParts.length !== actualParts.length) {
    return null;
  }
  
  const params: RouteParams = {};
  
  for (let i = 0; i < routeParts.length; i++) {
    const routePart = routeParts[i];
    const actualPart = actualParts[i];
    
    if (routePart.startsWith(':')) {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞
      const paramName = routePart.slice(1);
      params[paramName] = actualPart;
    } else if (routePart !== actualPart) {
      // –ß–∞—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      return null;
    }
  }
  
  return params;
};

export function useUrlRouter() {
  const [currentRoute, setCurrentRoute] = useState<Route>(() => {
    // Safe initialization with error handling
    try {
      return parseUrl(window.location.pathname);
    } catch (error) {
      console.warn('URL parsing error, falling back to default route:', error);
      return {
        path: '/orders',
        tab: 'orders',
        screen: 'main',
      };
    }
  });


  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π URL
  useEffect(() => {
    const handlePopState = () => {
      try {
        setCurrentRoute(parseUrl(window.location.pathname));
      } catch (error) {
        console.warn('URL parsing error on navigation:', error);
        setCurrentRoute({
          path: '/orders',
          tab: 'orders',
          screen: 'main',
        });
      }
    };

    window.addEventListener('popstate', handlePopState);
    return () => window.removeEventListener('popstate', handlePopState);
  }, []);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
  const navigate = useCallback((path: string, replace = false) => {
    const newRoute = parseUrl(path);
    
    if (replace) {
      window.history.replaceState(null, '', path);
    } else {
      window.history.pushState(null, '', path);
    }
    
    setCurrentRoute(newRoute);
  }, []);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
  const goBack = useCallback(() => {
    window.history.back();
  }, []);

  // –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL
  const buildUrl = {
    // Products
    products: () => '/products',
    productDetail: (id: number) => `/products/${id}`,
    productEdit: (id: number) => `/products/${id}/edit`,
    productAdd: () => '/products/add',
    productAddVitrina: () => '/products/add/vitrina',
    productAddCatalog: () => '/products/add/catalog',
    
    // Orders
    orders: () => '/orders',
    orderDetail: (id: string) => `/orders/${id}`,
    orderAdd: () => '/orders/add',
    
    // Inventory
    inventory: () => '/inventory',
    inventoryDetail: (id: number) => `/inventory/${id}`,
    inventoryAdd: () => '/inventory/add',
    inventoryAudit: () => '/inventory/audit',
    
    // Customers
    customers: () => '/customers',
    customerDetail: (id: number) => `/customers/${id}`,
    customerAdd: () => '/customers/add',
    
    // Profile
    profile: () => '/profile',
    dashboard: () => '/dashboard',
  };

  return {
    currentRoute,
    navigate,
    goBack,
    buildUrl,
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    tab: currentRoute.tab,
    screen: currentRoute.screen,
    params: currentRoute.params || {},
  };
}